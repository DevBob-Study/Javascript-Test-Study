// 2차 시도 (성공)
function solution(n) {
	let [a, b] = [1, 1];
	for (let i = 2; i <= n; i++) [a, b] = [b, (a + b) % 1234567];
	return b;
}



// 1차 시도 (성공)
function solution(n) {
	// dp 배열을 초기화합니다. dp[i]는 i번째 칸까지 도달하는 방법의 수를 저장합니다.
	const dp = new Array(n + 1).fill(0);

	// 기본 케이스: 1칸과 2칸에 도달하는 방법의 수를 설정합니다.
	dp[1] = 1;
	dp[2] = 2;

	// 3번째 칸부터 n번째 칸까지 반복합니다.
	for (let i = 3; i <= n; i++) {
		// i번째 칸에 도달하는 방법의 수는 (i-1)번째 칸에서 1칸 점프하는 경우와
		// (i-2)번째 칸에서 2칸 점프하는 경우의 합입니다.
		dp[i] = (dp[i - 1] + dp[i - 2]) % 1234567;
	}

	// n번째 칸에 도달하는 방법의 수를 반환합니다.
	return dp[n];
}
